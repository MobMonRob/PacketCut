<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="#ff0000" is_bold="False" name="_Info" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556177514.31" ts_lastsave="1556189566.72" unique_id="1">
		<rich_text>Vorgehen: Mir anschalten, Roboter anschalten, LAN Kabel verbinden. (Wichtig: Rechner Netzwerkkarte richtig konfiguriert)

Roboter initialisieren: drücken und halten; nochmal wechselt die Richtung
Türe schließen immer!
ALT+SHIFT+F für Einrückung

</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">Stundenzettel eintragen
Roboter aus machen</rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">Git Push</rich_text>
		<rich_text>

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Vergangen" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556179371.03" ts_lastsave="1556189433.27" unique_id="2">
		<rich_text scale="h1" underline="single">Sensor auslesen per Socket in Java</rich_text>
		<rich_text>
	//1. Java Socket Client
		//-Daten holen einfach und ausgeben auf Konsole
	//2. An Hardware testen -&gt; MIR Netzwerkschlüssel: mirex4you
		//-IP Adresse passt?
	//3. Empfangene Daten nutzbar machen
		//-Tokenisieren
		//-Zu Doubles konvertierenzur richtigen Zeit holen und festhalten
		//-Fehler bereinigen mit zu viele Werte da
		//-Zeitstempel 
		//-aus der Schleife heraus holen mit Callback
		//-Receive Methode verbessern (In Methoden auslagern wo der Name passt)
	//4. Verbessern
		//-Verbindung schließen

</rich_text>
		<rich_text scale="h1" underline="single">Plotten 1</rich_text>
		<rich_text>
//XChart API anschauen
//Wie Library in Netbeans importieren? -&gt; sonst: Umstieg auf maven?

//ordentliches Plot mit richtigem Datenformat
	//Zeit eintragen schauen
	//Update

//Verbinden der APIs von SensorDataReceiver und Plot

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="#ff0000" is_bold="True" name="Aktuell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556179378.83" ts_lastsave="1556189591.2" unique_id="3">
		<rich_text scale="h1" underline="single">Daten besser analysierbar machen</rich_text>
		<rich_text>
Extra chart mit allen letzten x Sekunden
Style übergeben für Zeit Formatierung

Löcher in der Zeitmessereihe detektieren?
	Flasche dranbinden als Pendel. Periodendauer abschätzen.
	äquidistant (Datenpunkte, dazwischen gepuffert und landen bei mir nicht mehr äquidistant)?
	-&gt;Alles Prima: Datenpunkte schon, Timestamps nicht	
	-&gt;Sample Rate davon ableiten
	Löcher?

--&gt;bessere UI von der Bedienung her basteln!

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Künftig" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556179385.33" ts_lastsave="1556189458.46" unique_id="4">
		<rich_text>hinter ROS API verbergen (Messages)
Asynchrone Kommunikation einbauen. Receive von SensorDataReceiver sollte in einem seperaten Thread landen
	</rich_text>
		<rich_text link="webs https://knowm.org/how-to-make-real-time-charts-in-java/">https://knowm.org/how-to-make-real-time-charts-in-java/</rich_text>
		<rich_text>

</rich_text>
	</node>
</cherrytree>
