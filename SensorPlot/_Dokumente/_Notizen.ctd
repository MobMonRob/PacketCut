<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="#ff0000" is_bold="False" name="_Info" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556177514.31" ts_lastsave="1556189566.72" unique_id="1">
		<rich_text>Vorgehen: Mir anschalten, Roboter anschalten, LAN Kabel verbinden. (Wichtig: Rechner Netzwerkkarte richtig konfiguriert)

Roboter initialisieren: drücken und halten; nochmal wechselt die Richtung
Türe schließen immer!
ALT+SHIFT+F für Einrückung

</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">Stundenzettel eintragen
Roboter aus machen</rich_text>
		<rich_text>
</rich_text>
		<rich_text foreground="#ffff00000000" scale="h2">Git Push</rich_text>
		<rich_text>

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Vergangen" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556179371.03" ts_lastsave="1556189433.27" unique_id="2">
		<rich_text scale="h1" underline="single">Sensor auslesen per Socket in Java</rich_text>
		<rich_text>
	//1. Java Socket Client
		//-Daten holen einfach und ausgeben auf Konsole
	//2. An Hardware testen -&gt; MIR Netzwerkschlüssel: mirex4you
		//-IP Adresse passt?
	//3. Empfangene Daten nutzbar machen
		//-Tokenisieren
		//-Zu Doubles konvertierenzur richtigen Zeit holen und festhalten
		//-Fehler bereinigen mit zu viele Werte da
		//-Zeitstempel 
		//-aus der Schleife heraus holen mit Callback
		//-Receive Methode verbessern (In Methoden auslagern wo der Name passt)
	//4. Verbessern
		//-Verbindung schließen

</rich_text>
		<rich_text scale="h1" underline="single">Plotten 1</rich_text>
		<rich_text>
//XChart API anschauen
//Wie Library in Netbeans importieren? -&gt; sonst: Umstieg auf maven?

//ordentliches Plot mit richtigem Datenformat
	//Zeit eintragen schauen
	//Update

//Verbinden der APIs von SensorDataReceiver und Plot

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="#ff0000" is_bold="True" name="Aktuell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556179378.83" ts_lastsave="1556871407.41" unique_id="3">
		<rich_text foreground="#ffff00000000" scale="h2">Fragen, ob Mi, Do arbeiten immer
Mensa!</rich_text>
		<rich_text>
____________________________


//Spezifikation präzisieren.

Bugfix, das Format betreffend mit Alignment, wie es vom Roboter kommt
	//Ausprogrammieren
	//Funktionierend machen
	(09:10) Zeit Ding verbessern
	String löschen
	Besser machen mit Längen
	Bei Erfolg aus den drei Puffern einen machen. Manuell statt mark und limit.
	SensorDataProcessor getNextDataPoint() vernüntig aufteilien

Socket Event API?
Threading weiter machen.


</rich_text>
		<rich_text scale="h1" underline="single">UI</rich_text>
		<rich_text>
</rich_text>
		<rich_text scale="h2" underline="single">Verbesserte Plot Darstellung</rich_text>
		<rich_text>
</rich_text>
		<rich_text scale="h3" underline="single">Spezifikation</rich_text>
		<rich_text>
Style übergeben für Zeit Formatierung
	Date für Y erlaubt
	</rich_text>
		<rich_text link="webs https://github.com/knowm/XChart">https://github.com/knowm/XChart</rich_text>
		<rich_text> suche: date

Buttons für Verbinden, ... -&gt; asychnron, Threading!
	</rich_text>
		<rich_text link="webs https://knowm.org/how-to-make-real-time-charts-in-java/">https://knowm.org/how-to-make-real-time-charts-in-java/</rich_text>
		<rich_text>

Mockup für Daten bauen

JavaFx für GUI:  </rich_text>
		<rich_text link="webs http://jaxcenter.de/java-tutorial-javafx-53878">http://jaxcenter.de/java-tutorial-javafx-53878</rich_text>
		<rich_text>

</rich_text>
		<rich_text underline="single">Schieberegler 1</rich_text>
		<rich_text>
Bestimmt die Anzahl an Daten, die im Plot dargestellt werden.
Breite des Zeitfensters T.
Darstellung der letzten T Sekunden.

</rich_text>
		<rich_text underline="single">Schieberegler 2</rich_text>
		<rich_text>
Macht Plot in Fenster breiter. U.u. über die Fenstergrenze.
Zoom nochmal innerhalb von T Ausschnitt.
Regler ganz nach Rechts: Plot zeigt am rechten Rand aktuellen Zahlenwert an.

</rich_text>
		<rich_text underline="single">Scrollbar</rich_text>
		<rich_text>
Scrollbar verschiebt Ausschnitt im Plot.

</rich_text>
		<rich_text underline="single">Checkbox</rich_text>
		<rich_text>
Deaktiviert Zoom.
Ganzes letztes Zeitintervall T wird angezeigt.


</rich_text>
		<rich_text scale="h2" underline="single">Weitere Plot API´s</rich_text>
		<rich_text>
Trennung der verschiedenen Plot API´s auch visuell im Fenster.

1-2 weitere Plot API´s implementieren.

Vergleich der Plot API´S bzgl.
	-Möglichkeiten der Konfiguration (Beschriftungen, Ticks etc.)
	-Aussehen der UI
	-Performance

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Künftig" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556179385.33" ts_lastsave="1556264473.58" unique_id="4">
		<rich_text scale="h1" underline="single">Daten besser analysierbar machen</rich_text>
		<rich_text>
Löcher in der Zeitmessereihe detektieren?
	Flasche dranbinden als Pendel. Periodendauer abschätzen.
	äquidistant (Datenpunkte, dazwischen gepuffert und landen bei mir nicht mehr äquidistant)?
	-&gt;Alles Prima: Datenpunkte schon, Timestamps nicht	
	-&gt;Sample Rate davon ableiten
	Löcher?

</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="E-Mail Oliver" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1556198404.46" ts_lastsave="1556264502.02" unique_id="5">
			<rich_text>Ziel ist ja,
   1) den Realtime-Plot der Kraftmessdaten in unsere bestehende Desktopanwendung LynxAnalyser einzubauen.

   2) Den Kraft/Momenten-Sensor soweit zu testen, dass wir Vertrauen in die Daten bekommen und sample-rate, Äquidistanz der Messpunkte, geg. Ausfallhäufigkeiten kennen und damit die Grenzen des Systems kennen.

   3) Integration des Datenstreams in ROS um kraftsensitive Roboter-Apps bauen zu können


Bevor ich das in Lynx einbaue, würde ich gerne doch erst noch mal einen Vergleich verschiedener Plot-APIs sehen. Wäre klasse, wenn Du noch ein oder zwei weitere implementieren könntest und ein wenig vergleichen:

	-Möglichkeiten der Konfiguration (Beschriftungen, Ticks etc.)

	-Aussehen der UI

	-Performance


Also falls, Du Dich morgen dem Pendelversuch noch nicht anfreunden kannst, kannst Du gerne auch mit den UI Dingen weitermachen.

Außerdem habe ich noch mal überlegt, wie eine Realtime-Plotdarstellung für uns besonders praktisch wäre:

Ich stelle mir einen Schieberegler vor mit dem man die Breite des Zeitfensters T das dargestellt werden soll einstellen kann. Dargestellt werden immer die letzten T Sekunden.

Außerdem soll ein zweiter Schieberegler für einen Zoom zur Verfügung gestellt werden.

Das Fenster auf dem Bildschirm soll eine horizontale Scrolbar bekommen und zeigt damit immer nur einen Ausschnitt von T an.

D.h. wenn man die Scrollbar ganz nach rechts schiebt zeigt der Plot am rechten Rand immer den aktuellen Zahlenwert an. Wieviele man da sieht hängt von der Einstellung des Zooms ab.

Vielleicht könnten noch eine Checkbox hinzugefügt werden mit der automatisch immer das ganze letzte Zeitintervall T angezeigt wird.

</rich_text>
		</node>
	</node>
</cherrytree>
